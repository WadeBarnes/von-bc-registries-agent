#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of the environment.

  Usage:
    $0 [options] [commands]

  Example:
    $0 -e dev resetEventDatabase
    - This will drop and recreate the event database in the DEV environment.

  Options:
  ========
    -h prints the usage for the script
    -e <Environment> the environment (dev/test/prod) into which you are deploying (default: ${DEPLOYMENT_ENV_NAME})
    -l apply local settings and parameters
    -p <profile> load a specific settings profile; setting.<profile>.sh
    -P Use the default settings profile; settings.sh.  Use this flag to ignore all but the default
       settings profile when there is more than one settings profile defined for a project.
    -x run the script in debug mode to see what's happening

  Commands:
  ========
    resetEventDatabase
      - Drop and recreate the event database.

    resetMaraDatabase
      - Drop and recreate the mara database.

    deleteDatabase
      - Deletes all databases off a pod and recycles the pod leaving it in a clean state.
      - Useful when database credentials change.

    hardReset
      - Delete the persistent indy wallet information.
      - Drop and recreate the event database.

    getPipelineStatus
      - Get the pipeline status for the given environment.
        Runs the './run-step.sh bcreg/display_pipeline_status.py' pipeline script
        on an instance of a mara pod.

    requeueFailedEvents
      - Requeue any events (event_by_corp_filing records) that have failed processing.

    requeueFailedCorps
      - Requeue any corporations (corp_history_log records) that have failed processing.

    requeueFailedCreds
      - Requeue any credentials (credential_log records) that have failed posting.

    requeueProcessedCreds
      - Use with caution.  Requeue any credentials that have already been posted.

    requeueOrganization <corp_num>
      - Use with caution.  Requeue a specific company that may have already been processed.
        Where:
          - <corp_num>, is the corp_num from corp_history_log for the organization to requeue/reprocess.
        Example:
          $0 -e dev requeueOrganization 54321

    repostFailedCredentials
      - Use with caution.  Repost any failed credentials.  Requeues and posts any credentials that have failed
        posting one at a time to avoid any potential issues (such as deadlocks on the TOB side caused by 
        processing related credentials).

    scaleUp
      - Scale up one or more pods.
        For example;
          $0 -e dev scaleUp mara

    scaleDown
      - Scale down one or more pods.
        For example;
          $0 -e dev scaleDown mara

    recycle
      - Recycle one or more pods.
        For example;
          $0 -e dev recycle mara

    createDeployConfig
      - Create one or more deployment configurations in an OpenShift environment
        using pre-generated deployment configuration files.

        Examples;
          $0 -e dev createDeployConfig
          - This will create deployment configurations from all of the existing deployment configuration files.

          $0 -e dev createDeployConfig ./bcreg-x-agent-deploy_DeploymentConfig.json
          - This will create a deployment configurations from the specified deployment configuration file.

    updateDeployConfig
      - Update one or more deployment configurations in an OpenShift environment
        using pre-generated deployment configuration files.

        Examples;
          $0 -e dev updateDeployConfig
          - This will replace deployment configurations for all of the existing deployment configuration files.

          $0 -e dev updateDeployConfig ./bcreg-x-agent-deploy_DeploymentConfig.json
          - This will replace the deployment configurations for the specified deployment configuration file.

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
while getopts p:Pe:lxh FLAG; do
  case $FLAG in
    p ) export PROFILE=$OPTARG ;;
    P ) export IGNORE_PROFILES=1 ;;
    e ) export DEPLOYMENT_ENV_NAME=$OPTARG ;;
    l ) export APPLY_LOCAL_SETTINGS=1 ;;
    x ) export DEBUG=1 ;;
    h ) usage ;;
    \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z "${DEBUG}" ]; then
  set -x
fi

# Check for required options ...
if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
  echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
  usage
fi

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
resetDatabase() {
  _dbPodName=${1}
  if [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the ${_dbPodName} database will be dropped and recreated.  All data will be lost."

  switchProject
  exitOnError

  dropAndRecreatePostgreSqlDatabase ${_dbPodName}

  echoWarning "\nThe ${_dbPodName} database has been deleted and recreated."
}

resetEventDatabase() {
    _dbPodName=${1}
    _maraPodName=${2}
    if [ -z "${_dbPodName}" ] || [ -z "${_maraPodName}" ]; then
      echo -e \\n"resetEventDatabase; Missing parameter!"\\n
      exit 1
    fi

    resetDatabase "${_dbPodName}"
    runInContainer -v "${_maraPodName}" 'cd scripts && ./run-step.sh bcreg/bc_reg_migrate.py'  
}

deleteDatabase() {
  _dbPodName=${1}
  if [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune all of the databases on ${_dbPodName} will be deleted.  All data will be lost."

  switchProject
  exitOnError

  deleteAndRecreateDatabase ${_dbPodName}

  echoWarning "\nThe databases on ${_dbPodName} have been deleted."
}

hardReset() {
  _agentPodName=${1}
  _dbPodName=${2}
  _walletDbPodName=${3}
  if [ -z "${_agentPodName}" ] || [ -z "${_dbPodName}" ] || [ -z "${_walletDbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  switchProject
  exitOnError

  # Scale down the agent pod ...
  scaleDown ${_agentPodName}
  exitOnError
  printAndWait "Wait for the ${_agentPodName} pod to completely shut down before continuing."

  # Drop and recreate the application database ...
  dropAndRecreatePostgreSqlDatabase ${_dbPodName}
  exitOnError

  # Drop the wallet databases ...
  if podExists ${_walletDbPodName}; then
    deleteAndRecreateDatabase ${_walletDbPodName}
    exitOnError
  fi

  # Bring the agent pod back up ...
  scaleUp ${_agentPodName}
  exitOnError
  printAndWait "Wait for the ${_agentPodName} pod to completely start up before continuing."

  echoWarning "\nThe project's database and indy wallets have been reset."
}

createDeployconfigs(){
  deployConfigs ${@}
}

updateDeployconfigs(){
  # Don't update the postgresql-oracle-fdw-deploy config
  _postgresFdwConfig="postgresql-oracle-fdw-deploy_DeploymentConfig.json"
  if [ -f ${_postgresFdwConfig} ]; then
    echoWarning "Removing ${_postgresFdwConfig} so it does not get updated ..."
    rm -f ${_postgresFdwConfig}
  fi

  export OC_ACTION=replace
  deployConfigs ${@}
}

getPipelineStatus() {
  _maraPodName=${1}
  if [ -z "${_maraPodName}" ]; then
    echo -e \\n"getPipelineStatus; Missing parameter!"\\n
    exit 1
  fi

  echo
  runInContainer \
    ${_maraPodName} \
    'cd scripts && ./run-step.sh bcreg/display_pipeline_status.py'
}

requeueFailedCreds() {
  _databasePodName=${1}
  if [ -z "${_databasePodName}" ]; then
    echo -e \\n"requeueFailedCreds; Missing parameter!"\\n
    exit 1
  fi

  echo
  runInContainer -v \
  ${_databasePodName} \
  'psql -d ${POSTGRESQL_DATABASE} -ac "update credential_log set process_success = null, process_date = null, process_msg = null where process_success = '"'"'N'"'"';"'
}

requeueProcessedCreds() {
  _databasePodName=${1}
  if [ -z "${_databasePodName}" ]; then
    echo -e \\n"requeueProcessedCreds; Missing parameter!"\\n
    exit 1
  fi

  echo
  runInContainer -v \
  ${_databasePodName} \
  'psql -d ${POSTGRESQL_DATABASE} -ac "update credential_log set process_success = null, process_date = null, process_msg = null where process_success = '"'"'Y'"'"';"'
}

requeueFailedEvents() {
  _databasePodName=${1}
  if [ -z "${_databasePodName}" ]; then
    echo -e \\n"requeueFailedEvents; Missing parameter!"\\n
    exit 1
  fi

  echo
  runInContainer -v \
  ${_databasePodName} \
  'psql -d ${POSTGRESQL_DATABASE} -ac "update event_by_corp_filing set process_success = null, process_date = null, process_msg = null where process_success = '"'"'N'"'"';"'
}

requeueFailedCorps() {
  _databasePodName=${1}
  if [ -z "${_databasePodName}" ]; then
    echo -e \\n"requeueFailedEvents; Missing parameter!"\\n
    exit 1
  fi

  # Get affected corp_nums
  corp_nums=$(runInContainer \
    ${_databasePodName} \
    'psql -d ${POSTGRESQL_DATABASE} -t -c "select corp_num from corp_history_log where process_success = '"'"'N'"'"';"')
  corp_nums=$(echo "${corp_nums}" | sed -e "s~[[:space:]]*\(.*\)~'\1'~" | awk -vORS=, '{ print $0 }' | sed 's~,$~\n~')

  # Remove affected credential_log records
  runInContainer -v \
    ${_databasePodName} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"delete from credential_log where corp_num in (${corp_nums});\""

  # Remove affected corp_history_log records
  runInContainer -v \
    ${_databasePodName} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"delete from corp_history_log where corp_num in (${corp_nums});\""

  # Requeue affected event_by_corp_filing records
  runInContainer -v \
    ${_databasePodName} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"update event_by_corp_filing set process_success = null, process_date = null, process_msg = null where corp_num in (${corp_nums});\""
}

requeueOrganization() {
  _corpNum=${1}
  _databasePodName=${2}
  if [ -z "${_corpNum}" ] || [ -z "${_databasePodName}" ]; then
    echo -e \\n"requeueOrganization; Missing parameter!"\\n
    exit 1
  fi

  # Remove affected credential_log records
  runInContainer -v \
    ${_databasePodName} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"delete from credential_log where corp_num in (${_corpNum});\""

  # Remove affected corp_history_log records
  runInContainer -v \
    ${_databasePodName} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"delete from corp_history_log where corp_num in (${_corpNum});\""

  # Requeue affected event_by_corp_filing records
  runInContainer -v \
    ${_databasePodName} \
    "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"update event_by_corp_filing set process_success = null, process_date = null, process_msg = null where corp_num in (${_corpNum});\""
}

repostFailedCredentials() {
  (
    _databasePodName=${1}
    _maraPodName=${2}

    if [ -z "${_databasePodName}" ] || [ -z "${_maraPodName}" ]; then
      echo -e \\n"repostFailedCredentials; Missing parameter!"\\n
      exit 1
    fi

    # Get affected record_ids
    record_ids=$(runInContainer \
      ${_databasePodName} \
      'psql -d ${POSTGRESQL_DATABASE} -t -c "select record_id from credential_log where process_success = '"'"'N'"'"' order by record_id;"')
    record_ids=$(echo "${record_ids}" | sed -e "s~[[:space:]]*\(.*\)~'\1'~")

    for record_id in ${record_ids}; do

      echo -e "\nReposting failed credential  ${record_id} ..."

      runInContainer \
        ${_databasePodName} \
        "psql -d "'${POSTGRESQL_DATABASE}'" -ac \"update credential_log set process_success = null, process_date = null, process_msg = null where record_id = ${record_id};\""

      echo
      runInContainer \
        ${_maraPodName} \
        'cd scripts && ./run-step.sh bcreg/bc_reg_pipeline_post_credentials.py'
    done
  )
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  reseteventdatabase)
    # Allow all of the other parameters to be overridden ...
    dbPodName=${1:-event-db}
    maraPodName=${2:-mara}
    resetEventDatabase "${dbPodName}" "${maraPodName}"
    ;;
  resetmaradatabase)
    # Allow all of the other parameters to be overridden ...
    dbPodName=${1:-mara-db}
    resetDatabase "${dbPodName}"
    ;;
  requeuefailedcreds)
    dbPodName=${1:-event-db}
    requeueFailedCreds "${dbPodName}"
    ;;
  requeuefailedevents)
    dbPodName=${1:-event-db}
    requeueFailedEvents "${dbPodName}"
    ;;
  requeuefailedcorps)
    dbPodName=${1:-event-db}
    requeueFailedCorps "${dbPodName}"
    ;;
  requeueprocessedcreds)
    dbPodName=${1:-event-db}
    requeueProcessedCreds "${dbPodName}"
    ;;
  requeueorganization)
    corpNum=${1}
    dbPodName=${2:-event-db}
    requeueOrganization "${corpNum}" "${dbPodName}"
    ;;
  deletedatabase)
    dbPodName=${1}
    deleteDatabase "${dbPodName}"
    ;;
  hardreset)
    # Allow all of the other parameters to be overridden ...
    agentPodName=${1:-bcreg-x-agent}
    dbPodName=${2:-event-db}
    walletDbPodName=${3:-wallet-db}
    hardReset "${agentPodName}" "${dbPodName}" "${walletDbPodName}"
    ;;
  getpipelinestatus)
    maraPodName=${1:-mara}
    getPipelineStatus "${maraPodName}"
    ;;
  repostfailedcredentials)
    dbPodName=${1:-event-db}
    maraPodName=${2:-mara}
    repostFailedCredentials "${dbPodName}" "${maraPodName}"
    ;;
  scaleup)
    scaleUp ${@}
    ;;
  scaledown)
    scaleDown ${@}
    ;;
  recycle)
    recyclePods ${@}
    ;;
  createdeployconfig)
    createDeployconfigs ${@}
    ;;
  updatedeployconfig)
    updateDeployconfigs ${@}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    usage
    ;;
esac

popd >/dev/null