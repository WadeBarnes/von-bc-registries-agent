#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Allows you to manage certain aspects of the environment.

  Usage: 
    $0 [options] [commands]

  Example:
    $0 -e dev resetEventDatabase
    - This will drop and recreate the event database in the DEV environment.

  Options:
  ========
    -h prints the usage for the script
    -e <Environment> the environment (dev/test/prod) into which you are deploying (default: ${DEPLOYMENT_ENV_NAME})
    -l apply local settings and parameters
    -p <profile> load a specific settings profile; setting.<profile>.sh
    -P Use the default settings profile; settings.sh.  Use this flag to ignore all but the default 
       settings profile when there is more than one settings profile defined for a project.
    -x run the script in debug mode to see what's happening

  Commands:
  ========
    resetEventDatabase
      - Drop and recreate the event database.

    resetMaraDatabase
      - Drop and recreate the mara database.

    deleteWallets
      - Delete the local wallets from one or more pods.
        For example;
          $0 -e dev deleteWallets bcreg-x-agent

    recycle
      - Recycle one or more pods.
        For example;
          $0 -e dev recycle mara

    deplyToProdTmp
      - Deploy images to the prod-tmp environment.  Deploys images tagged for `test` by default. 
        For examples;
          $0 -p bc-tob-prod-tmp deplyToProdTmp
          $0 -p bc-tob-prod-tmp deplyToProdTmp latest

EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
while getopts p:Pe:lxh FLAG; do
  case $FLAG in
    p ) export PROFILE=$OPTARG ;;
    P ) export IGNORE_PROFILES=1 ;;    
    e ) export DEPLOYMENT_ENV_NAME=$OPTARG ;;
    l ) export APPLY_LOCAL_SETTINGS=1 ;;
    x ) export DEBUG=1 ;;
    h ) usage ;;
    \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z "${DEBUG}" ]; then
  set -x
fi

# Check for required options ...
if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
  echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
  usage
fi

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
resetDatabase() {
  _dbPodName=${1}
  if [ -z "${_dbPodName}" ]; then
    echo -e \\n"resetDatabase; Missing parameter!"\\n
    exit 1
  fi

  printAndAskToContinue "If you contiune the ${_dbPodName} database will be dropped and recreated.  All data will be lost."

  switchProject
  exitOnError

  dropAndRecreatePostgreSqlDatabase ${_dbPodName}

  echoWarning "\nThe ${_dbPodName} database has been deleted and recreated."
}

deplyToProdTmp() {
  _fromTag=${1}
  if [ -z "${_fromTag}" ]; then
    echo -e \\n"deplyToProdTmp; Missing parameter!"\\n
    exit 1
  fi

  tagProjectImages.sh -s "${_fromTag}" -t prod-tmp
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  reseteventdatabase)    
    # Allow all of the other parameters to be overridden ...
    dbPodName=${1:-event-db}
    resetDatabase "${dbPodName}"
    ;;
  resetmaradatabase)    
    # Allow all of the other parameters to be overridden ...
    dbPodName=${1:-mara-db}
    resetDatabase "${dbPodName}"
    ;;
  deletewallets)
    deleteWallets ${@}
    recyclePods ${@}
    ;;
  recycle)
    recyclePods ${@}
    ;;
  deplytoprodtmp)
    deplyToProdTmp ${1:-test}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    usage
    ;;
esac

popd >/dev/null